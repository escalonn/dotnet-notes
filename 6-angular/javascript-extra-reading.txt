(links -)
http://javascript.info
https://developer.mozilla.org/en-US/docs/Web
https://egghead.io/
https://github.com/getify/You-Dont-Know-JS
https://javascript30.com/
http://shop.oreilly.com/product/9780596517748.do
https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API


http://javascript.info/document

skim pages 1 through 7 of the document section

http://javascript.info/events

skim this section briefly, enough to learn what stopPropagation and preventDefault do

http://javascript.info/async

skim promises section.

not expected to know all details, but should be able to give general description of feature and at least a couple details.

http://javascript.info/form-elements

this section is helpful if you are working with forms in your project 1.5 with javascript.

also:

https://docs.microsoft.com/en-us/aspnet/core/security/cross-site-scripting

skim this to learn what XSS is, and at least one technique or feature in ASP.NET to prevent it. similar concept to SQL injection.
razor expressions automatically html-encode strings.
but they do not js-encode them, which they should be if in a js context like <script></script>!!
    you can do it manually by @injecting a JavaScriptEncoder and using Encode method.


https://docs.microsoft.com/en-us/aspnet/core/security/cors

read the opening paragraph for understanding, and then use the suggestions to enable CORS on your API, _if_ you wish to make AJAX requests from client-side to the backend service.
    not necessary if a backend (like with .NET HttpClient) is the only thing accessing your API.
"same-origin" is defined by having the same scheme (http/s), host (e.g. w/ or w/o www.), and port.
    when configuring WithOrigins, make sure you don't put a trailing slash /

cors policies can be applied per-controller or per-action by using EnableCors, DisableCors attrs.
    this makes sense if e.g. some origins don't need permission to access all parts of the API
