MVC crash course:
- model, view, controller [https://docs.microsoft.com/en-us/aspnet/core/mvc/views] [https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers]
- its overall lifecycle (including middleware, routing, filters, action methods, model binding, result execution) [https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters]
- Razor syntax (expressions, blocks, tag helpers, HTML helpers) [https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor, https://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers]
- validation (client-side, server-side, ModelState, Data Annotations) [https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation]
- dependency injection [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection, the first half]
- (anything about Razor Pages can pretty much be ignored)

model-view-controller architectural pattern
    request -> app server
        template (view)
        logic (controller)
        data (model)

before ASP.NET MVC we had ASP.NET Web Forms.
    e.g. File.aspx
        another kind of html with template
        too much in one file: devs, DBAs and others are all working on it.
        tightly coupled

MVC
    request -> controller (logic) -> model (db) -> view (design) -> ... -> response
    decoupled / separation of concerns
    therefore testable because also all c# classes

controller depends on view and model
view depends on just model
model depends on nothing
    part of separation of concerns; testability

views should be strongly typed. that gives us the benefit of type checking and intellisense in the view.
the alternative is dynamic (aka weakly typed) views, which treats Model as dynamic type

razor syntax
    razor expressions - start with @ character. like @DateTime.Now
        it does its best to infer where the expression truly begins and ends.
        if that's not good enough, then you can be explicit and use @(DateTime.Now)
        whatever the expression returns, put that on the page as a string.
    these are HTML encoded automatically for us. e.g. any string containing <> will show up as &lt;&gt;.
    razor blocks - @ {  } runs logic or sets variables, doesn't by itself put things on the page.
        we have @if else if, @switch, @for, @foreach
    comments @* *@
    @model directive - what model will this view be strongly typed to?
    HTML helpers
    tag helpers
        the LINQ query syntax of MVC. for frontend barbarians to feel more comfortable.
        does many things html helpers can do, but not all of them.
        for some reason microsoft loves to mix them together.
        https://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/intro#tag-helpers-compared-to-html-helpers

Html.DisplayNameFor and Html.DisplayFor html helpers
    configured via display data annotations like DisplayAttribute and DataTypeAttribute
form tag helper
    includes anti-forgery token to prevent a malicious website from getting your browser to make requests to my website.
    makes every form submission i receive require it to send also a unique token that i put on that copy of the form when i made it.
    Html.BeginForm, doesn't automatically include anti-forgery token, used with using statement to wrap the form
    in HTML, the default form method is GET, but the form tag helper's default method is POST.
label tag helper <label asp-for="Name">, the label for some value (html helper - Html.LabelFor)
input tag helper
    <input asp-for="Name" /> same as @Html.EditorFor(m => m.Name)
    Html.EditorForModel will make inputs for every model property, but harder to customize
    if a model is passed to the view, the form control will begin populated with the model's values
validation message tag helper - for client-side validation (and the results of server-side validation when form is rejected).
    <span asp-validation-for="">. html helper: Html.ValidationMessageFor
    leverages data attributes and jquery to display validation error messages
    and prevent the form from being submitted. also can display server-side ModelState errors.
validation summary tag helper and html helper (Html.ValidationSummary)
    <div asp-validation-summary="">, attr value All, ModelOnly, or None
    also can display server-side ModelState errors.
select tag helper and Html.DropDownListFor
    asp-for="Country" asp-items="Model.Countries"
    you give it the list of all, and also the property to put the currently selected one in.
    the list should be some IEnumerable<SelectListItem> (e.g. SelectList) property on the model.
    it's possible to get the items from an enum as well, can search how to do that.
anchor (a) tag helper (or Html.ActionLink)
    asp-controller, asp-action, asp-route-{name}
    link to a specific route / controller / action in your application
    (Url.Action for when you just need the URL, not a whole element)
we don't need to say "Model." with asp-for, but we do for most of the other tag helper attrs.

client-side validation is more for user experience. faster error, don't need to submit the form to see it didn't work.
still need server side validation because user could have javascript disabled or be malicious.
any errors detected server-side during model binding show up in ModelState of the controller
    check ModelState.IsValid

client-side validation - could use built-in HTML validation attributes,
    but they are limited. the built-in html & tag helpers are designed to work with
    microsoft's jquery unobstrusive validation library, which uses the jquery validate jquery plugin. the helpers put html5 data attributes onto the form controls, which
    the validation library uses to configure validation logic and display validation messages
    on the client-side.
this enables data annotations in one place to drive consistent validation on both server-side and client-side.
custom client-side validation is also possible; see documentation.

data annotations
    display and edit
        Display
        DataType (control what kind of form control is used by helpers)
    validation (can replace the default error messages)
        Required (non-nullable types are already required)
        Range
        StringLength
        RegularExpression
        can add custom validation attributes: subclass ValidationAttribute, override IsValid

asp.net core runtime environment names
    Production is default
    Development is common alternative assumed by the templates for use in development
        typically, Development environment will switch on behaviors useful for debugging,
        like the developer exception page, non-minified css and js, disabled caching,
        or more verbose logging, but the developer has full control over this.
    Staging is sometimes used
    any other environment name can be used and checked for by code
    environment variable ASPNETCORE_ENVIRONMENT is read to determine the environment
    there is an environment tag helper which will either keep or remove its contents
        depending on environment.
    https://docs.microsoft.com/en-us/aspnet/core/fundamentals/environments

configuration in asp.net core
    pulled from configuration providers at runtime
    WebHost.CreateDefaultBuilder adds several app configuration providers:
    - appsettings.json
    - appsettings.{Environment}.json (different configs per environment)
    - user secrets (but only when in Development environment!)
    - environment variables
    - environment variables from the right runtime profile in launchSettings.json
        (dotnet run uses "Project", VS uses "IIS Express" by default)
    - command-line arguments
    later providers override earlier providers
    it's all customizable if you want to change or extend what CreateDefaultBuilder does
        you can get config from Azure Key Vault, Azure App Configuration,
        INI files, XML files, JSON files, in-memory collections, and others
    values show up in IConfiguration service, available from the Startup ctor
    rather than injecting IConfiguration into other classes, use the options pattern
        for a more encapsulated and strongly typed approach
        https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options
    config read from JSON in nested objects (heirarchical)
        is flattened so that ":" (colon) represents nesting.
        "__" (double underscore) also works; colon isn't supported on some systems.

routing
    convention (put in startup.cs)
        tried in order, fallback, so the default and most general one should go last
        we name them, so we can reference them with html helpers or tag helpers to generate links.
    or attribute routing (put in attributes on controllers and action methods)
        more precise control
        can use [Route], or [Http*]
        can have multiple routes that all work
        can be named as well, for the same purpose as convention-based routes
        if controller has RouteAttribute, its template will be prefixed to the actions' templates
    you can mix them within an application, but an action which uses
        attribute routing becomes unreachable from convention-based routing

dependency injection using registered services
    adddbcontext (scoped)
    singleton
    scoped (request)
    transient (new one every class)

filters https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters
    authorization filters - control access
    resource filters
    (then model binding happens)
    action filters - run just before or just after the action method to manipulate inputs or result
        can do server-side validation here in just one place
    exception filters - handle exceptions thrown at any previous step
        alternative to error-handling middleware (e.g. UseExceptionHandler),
        which is put in startup.cs and is global
    result filter - just before & just after preparing the result to be sent and sending it
[HttpPost] attribute

model binding
    form values (Request.Form)
    route values
    query strings (Request.QueryString)
    files
    [bindnever]
    [fromquery]
    [fromroute]
    [frombody]
    [bind]

partial views
    Html.PartialAsync
    by default, partial view will receive the same model as the parent view
        and also the same viewdata/viewbag collection
view components
    Component.InvokeAsync
    vc:* (it defines its own tag helper)
    ViewComponentResult
    can be parameterized

test controllers https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/testing
    some people say it's not worth very much to unit test controllers in ASP.NET,
    because of how much controller behavior is tied to the request processing pipeline:
    it's more useful to test action in conjunction with things like model binding, model
    validation, and filters than to test it in isolation. ASP.NET has some leaky abstractions
    here which make it less unit-testable than it might be.
integration testing is well-supported in ASP.NET Core too:
    https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests
    test the response produced by the app for a given request
    you can register mock services in place of real ones for even more control.

unit-testing classes with dependencies (e.g. most controllers) is best handled with dependency injection
    and a mocking framework like Moq or NSubstitute. Moq is the most common.
    good tutorial Moq video: https://youtu.be/Krj3-h198KQ
    writing test double classes by hand is awkward and time-consuming compared
        to using mocks with Moq, especially when interfaces with many members need
        to be mocked, but only some of the members are relevant to the test.
        (that is an indication that you're not following the interface
        segregation principle, but sometimes we are constrained by the libraries
        and frameworks we depend on)

caching
    parts of views: cache tag helper, cache parts of the rendered html in memory for performance/responsiveness.
        enabled attr for a condition, default true
        expires-* attrs for expiry, default 20 min. several options
        vary-by-* attrs to distinguish cache by user, by query, by route, by anything, etc.
        priority attr to influence cache expiry (a suggestion, not guaranteed)
        something like a viewcomponent that accesses the database would be a great candidate for this type of caching
    data caching
        not enabled by default - setup with AddMemoryCache in ConfigureServices, then inject IMemoryCache
        write cache with Set(object key, object value), read cache with TryGetValue(object key, out object value)
        or, use GetOrCreateAsync with a lambda to do both.
        can configure caching options (expiry, etc) with extra parameters
    distributed cache
        stores serialized data or html outside the server, can be used by many app instances at once
        configure IDistributedCache with some provider, e.g. sql server or redis.
        for data, SetAsync, GetAsync(string key, byte[] value)
        for html, <distributed-cache> tag helper that works like cache tag helper
            its behavior falls back to regular cache tag helper, if IDistributedCache isn't configured

state management
    http is stateless - requests are independent of each other
    we may want some continuity between requests, or to handle authentication
    we can store state client-side:
        query strings: limited by url size, least secure option for sensitive data, logged often,
            can interfere with caching if caching is desired, easily modified by user.
            use only for minimal amounts of non-sensitive data
        hidden fields: (input type="hidden") somewhat easily modified by user; can only be sent by
            form submission. especially useful for multi-page form workflows
        cookies: key-value-pair storage maintained by browser per-domain.
            sent by client to server on every request until expiry (customizable) or server unsets them.
            authentication tokens fit this model very well.
            but keeping too much data in cookies will bloat and slow down every request.
            browsers also impose a limit.
        from javascript we can use html5 web storage api (sessionstorage, localstorage)
    storing state server-side:
        caching
        session state: store data per-session in memory or in a distributed store
            uses cookies to identify the client. if enabled, access using HttpContext.Session
    server-side state may be unable to scale to large numbers of users,
        but client-side state has no such problems.

    TempData: dictionary of string to object. data is removed after the request
        that reads it, unless Keep or Peek methods are used to keep it longer.
        by default, puts data in cookies. can easily configure to use session state instead.


example for using hidden fields with collections nested inside a model:

    <form asp-action="Post">
        @for (int i = 0; i < Model.Count; i++)
        {
            @Html.Hidden($"items[{i}].Id", Model[i].Id)
            @Html.Hidden($"items[{i}].Name", Model[i].Name)
        }
        <input type="submit" value="Post" class="btn btn-default" />
    </form>

    well actually in that case the model IS a collection
    i don't remember why it has items[i] instead of just [i] which would work for sure
        maybe i was model binding to a parameter named `items`

    https://docs.microsoft.com/en-us/aspnet/core/mvc/models/model-binding

in VS Code:
    for controllers you can just make the file yourself, but soon we'll want access to fancier templates too.
    one-time step for your system to teach dotnet how to scaffold ASP.NET Core things:
        `dotnet tool install -g dotnet-aspnet-codegenerator`
    initial step for this project to teach it how to get those new ASP.NET Corethings:
        `dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design`
    use `dotnet aspnet-codegenerator controller --help` and `dotnet aspnet-codegenerator view --help` for more info.
    these commands must be run from the project folder.
    make a NotesController (mostly empty):
        `dotnet aspnet-codegenerator controller -name Notes -outDir Controllers`
    make a NotesController (filled in with actions for CRUD operations):
        `dotnet aspnet-codegenerator controller -name Notes -actions -outDir Controllers`
    all those do is create a controller class with some default contents.
    for scaffolding views this aspnet-codegenerator is more useful.
    make an Index view for the NotesController using the "List" template:
        `dotnet aspnet-codegenerator view Index List -m NoteTakingApp.Models.Note -udl -outDir Views/Notes`
    make a Create view for the NotesController using the "Create" template:
        `dotnet aspnet-codegenerator view Create Create -m NoteTakingApp.Models.Note -scripts -udl -outDir Views/Notes`
    you should add the `-scripts` option whenever the page will contain a form, to enable client-side validation.
    there are templates Empty, List, Details, Create, Edit, Delete.

longer exercise:
    i recommend doing a mini-project using Entity Framework Core and ASP.NET Core MVC, with a database with one or two tables, and a UI with at least three or four views, which is not just a copy of the tutorial's. [https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app]

shorter exercise:
    make (or begin with) an mvc app that has more than one URL.
    implement functionality so every page displays a count of the number of times that URL has been visited.
    (correct techs to use: middleware, singleton service, layout, and either viewdata/viewbag or @inject)

decent blog post on p1-type architecture:
    https://www.infragistics.com/community/blogs/b/dhananjay_kumar/posts/how-to-implement-the-repository-pattern-in-asp-net-mvc-application
except that he doesn't put the business logic in the domain library, and he tries to use the same classes
    for data access as for the rest of the app.
