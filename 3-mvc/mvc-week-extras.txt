https://developer.mozilla.org/en-US/docs/Web
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input

https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app
https://docs.microsoft.com/en-us/aspnet/core/mvc/overview

https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets

"right way" to do database seeding https://docs.microsoft.com/en-us/ef/core/modeling/data-seeding

https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation
https://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/intro#tag-helpers-compared-to-html-helpers
https://docs.microsoft.com/en-us/aspnet/core/mvc/views/working-with-forms

https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters

sometimes we use models for forms, but we don't want to user to be able to set all the properties on that model, e.g. `Id`... or maybe... `LoggedInUsername` or `IsAdmin`! this is a _security vulnerability_ called *over-posting* (when the client POSTs more data than you wanted him to, filling in extra fields, that the server might wrongly trust the values of.)
"unsafe" solution #1: just be careful you ignore those other property values in your POST action method.
solution #2: make a new view model that lacks `Id` and use that.
solution #3: put `[BindNever]` attribute on `Id`.
solution #4: use `[Bind]` attr like: `public IActionResult Create([Bind("Name,FavFood,Desc,BirthDate")] Person person)` to prevent all but the specificed fields from binding.


preventing CSRF - use form tag helper;
    then use ValidateAntiForgeryToken on the actions, or AutoValidateAntiforgeryToken on controller/global
    to validate on every non-safe http method (yes POST, no GET)
    the token comes in a hidden form control, using name __RequestVerificationToken
    if not using form tag helper, can still get token with @Html.AntiForgeryToken()


the headache of logging EF with console app is all gone - we can set up NLog or Serilog easily for both EF and ASP.NET.
NLog: https://github.com/NLog/NLog.Web/wiki/Getting-started-with-ASP.NET-Core-2
   package `NLog.Web.AspNetCore`
   in `Program.CreateHostBuilder` with `.UseNLog()`.
Serilog: https://github.com/serilog/serilog-aspnetcore
   package `Serilog.AspNetCore`
   in `Program.CreateHostBuilder` with `.UseSerilog()`.
then `ILogger` service is automatically registered and can be requested by controller constructor or anywhere else that wants to log things. exceptions that come out of EF or ASP.NET are automatically logged, but other exceptions, you should log yourself.
(you still need to configure the logging as before, cf. the docs... NLog uses nlog.config xml file, while Serilog needs package `Serilog.Sinks.File` at least for file logging, and configures it with code, or, looks in appsettings.json using `Serilog.Settings.Configuration`)

ASP.NET Core is not itself an HTTP server; it needs some HTTP server implementation.
there are several scenarios, these are the main ones.
https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers
the ConfigureWebHostDefaults method implementation decides which, based on the chosen
    profile configured in launchSettings.json and some other things.
- Kestrel
    this is the default, e.g. with dotnet run.
    Kestrel is a lightweight cross-platform HTTP server. relatively new,
        does not support all the features of a mature general-purpose web server.
    Kestrel is not usually used in production by itself.
    manually configured with a UseKestrel call
- in-process in IIS or IIS Express
    Kestrel is not used; instead, IIS HTTP Server is.
    this is a server in IIS or IIS Express which runs in its same process.
    IIS and IIS Express use something called the ASP.NET Core Module
        to be able to handle this. for IIS, it's installed with the
        ASP.NET Core Hosting Bundle.
    the in-process hosting model is the default in IIS, or in Visual Studio
        (based on the launch profile with commandName iisExpress).
    only for Windows.
    manually configured with a UseIIS call
- out-of-process in IIS or IIS Express
    Kestrel is used, with IIS/IIS Express forwarding HTTP to and from it
        (reverse proxy).
    ASP.NET Core Module is also used by IIS/IIS Express to achieve this scenario.
    in csproj, <AspNetCoreHostingModel>OutOfProcess will enable this this when
        it would otherwise use in-process.
    also only for Windows.
    manually configured with a UseIISIntegration call
- Kestrel with some non-IIS reverse proxy server forwarding to it
    this is also an option. e.g. Nginx (used on Linux), Apache (cross-platform).
    from the point of view of ASP.NET Core, it is mostly the same as the first option.
when using a reverse-proxy, we could describe it as the "web server" in
    contrast to Kestrel in the role of "app server".
why use a reverse proxy?
- could manage many apps in one web server
- firewall or load-balancing features the app server doesn't support
- separate the concerns of the client-facing server from the needs of
    ASP.NET Core itself

ef example:
// this example's separation of concerns is not great because
// business rules (when an order is placed, inventory decreases)
// is being coded in the data access layer.
public void PlaceOrder(Order order)
{
    // omitted: check the location's inventory to make sure this will work,
    // check that all the entities really exist, etc.

    var dbCustomer = _context.Customers.Find(order.Customer.Id);
    var dbLocation = _context.Locations
        .Include(l => l.Inventories)
            .ThenInclude(i => i.Product)
        .First(l => l.Id == order.Location.Id);

    var dbOrder = new Data.Order
    {
        Customer = dbCustomer,
        Location = dbLocation
    };
    // a dictionary is a sequence of key-value pairs
    dbOrder.OrderLines.AddRange(order.Products.Select(pq => new Data.OrderLine {
        ProductId = pq.Key.Id
        Quantity = pq.Value
    }));

    // update the dbLocation's Inventory stuff:
    foreach (var orderLine in dbOrder.OrderLines)
    {
        var inventory = dbLocation.Inventories.First(i => i.Product == orderLine.Product);
        inventory.Quantity -= orderLine.Quantity;
    }

    // add all new reachable entities (the order and the order-lines)
    _context.Add(dbOrder);

    // apply all these changes as one transaction, not piece by piece
    _context.SaveChanges();
}
