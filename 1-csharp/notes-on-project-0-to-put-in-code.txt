as i said, you should not need to refactor your business logic classes just because we are now using SQL + EF -- the whole point of the layered architecture is they do not need to be tightly coupled to the database structure ---

but, the exception to that is, if your business logic models did not already have a way to uniquely identify themselves (like the primary key), you will need to add that in, so you can know which object corresponds to which row.

the job of a repository class is to expose simple data-storage operations (CRUD - create, read update, delete) on your business logic models - and the fact that they need to map them to and from these Entity Framework entities is just an implementation detail.

don't fall to the temptation to put business logic in a repository - that logic belongs somewhere in the business logic library, either in one of the models themselves or in some other service class like maybe OrderService.

the UI calls the repo methods, or when there is something more complicated in terms of business logic than mere create/read/update/delete, like placing an order, the UI calls an OrderService in the business logic layer, which itself will call repository methods to check inventories, create an order with order-lines, and update inventories.

the mapper class is only called from the repository methods, so, it would just mean copy+pasting the mapper method bodies into all the repo methods that call them.

the mapper class's only purpose is to avoid the code duplication that that strategy would involve.
