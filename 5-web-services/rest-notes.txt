WSDL:
https://www.guru99.com/wsdl-web-services-description-language.html
REST conceptual:
https://martinfowler.com/articles/richardsonMaturityModel.html
https://restfulapi.net/
REST implementation in ASP.NET Core:
https://docs.microsoft.com/en-us/aspnet/core/web-api
https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-design
https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-implementation
SOAP vs REST:
https://octoperf.com/blog/2018/03/26/soap-vs-rest/
Swagger implementation with ASP.NET Core:
https://docs.microsoft.com/en-us/aspnet/core/tutorials/getting-started-with-swashbuckle

level 1: identify resources as urls.
level 2: use http methods semantically, and status codes
level 3: use hypermedia.

distinguish resources from representations
resources get distinct URLs, distinguish representations with headers
follow conventions with HTTP methods

REST is an architectural style for systems like the web, where info of many different types is distributed widely in a network.
    it does not specify any particular protocols or technologies.
Roy Fielding, who invented REST, identified six architectural constraints (see below)
    which work together well for systems like that.
    in his dissertation he argues that these systems benefit more, the more of these constraints they follow.

the web follows REST mostly, and some parts follow it much more than others.
today we usually talk about REST in the context of web services, rather than the context of web pages and browsers.
REST does not require HTTP, but in practice we are almost always talking about REST over HTTP.
    HTTP's spec fits the requirements of REST very well; REST constraints have influenced the design of HTTP.
    some things about HTTP do not fit REST: e.g. cookies.
REST means, any system following its architectural constraints.
    in the industry, though, "REST" is often understood as an HTTP-based web service (that doesn't use hypermedia).

the six constraints.
    client-server (separation of concerns, reuse user-interface across platforms, evolve client and server independently)
    stateless (client, not server, stores session state; each request must have all info needed to understand it. scalable)
    cache (some responses should be cacheable by the client)
    uniform interface (between clients and servers, not one tied to implementations. loose coupling)
        identification of resources (some info or concept that can be named and represented)
            e.g. "latest version of code" and "version 1.2 of code" are different resources,
            even if the underlying value is the same right now. "the next event" and "all events this week" are resources
            we can link to resources and the links shouldn't break if the value changes or the representations change
        manipulation of resources through representations
            all actions are done by sending representations of intended state of a resource.
            representations have a media type, e.g. html, json, xml, jpg.
        self-descriptive messages
        hypermedia as the engine of application state (HATEOAS)
    layered system (servers can be clients to other servers; each only knows about what it's directly connected to)
    (code on demand) (optional. clients can download code for new features, like applets or scripts)
        common in the browser - web pages with JavaScript. uncommon outside the browser.

for websites, the browser implementations dominate the situation and drive how servers will behave,
    e.g. what sort of HTTP headers they will send, and how they will interpret different parts of HTTP.
    this was once more true (IE dominance), then it got a little better,
    and it's starting to get worse as Chrome dominates the market more.
        e.g. Edge used to have its own rendering engine, but recently switched to Chrome's.
        one big reason was, because too many websites depended on Chrome-specific behavior to work best,
            as opposed to only depending on standards.
    this makes the web less RESTful.
for web services, there is much wider diversity in client implementations, although browsers' XMLHttpRequest
    (used for AJAX) behavior matters a lot. so the HTTP standard carries a lot more weight as a reference point for
    everybody. that is the uniform interface HTTP services should be following if they want to do REST.

HTTP message structure: head (start-line, headers (optional)), empty line, body (optional)
HTTP request message structure
    start-line: HTTP method, request URI, HTTP version
HTTP response message structure
    start-line (called the status line): HTTP version, status code, status text (aka reason phrase, canned description of status code)
some headers are only for request (e.g. Accept)
some only for response (e.g. Server)
some for both (e.g. Cache-Control)
some for both, to describe the body when there is one (e.g. Content-Type, Content-Length)

headers
    accept (request)
    content-type
    user-agent (request)
    set-cookie (response)
    cookie (request)
    content-length (bytes)
    content-type (media type)

methods
    GET: safe (generate no change to visible system state (e.g. caching allowed))
    GET, PUT, DELETE: idempotent (result of 1 request is identical to result of N requests - subsequent requests don't change anything. turning switch on, vs. toggling switch.)
    POST is not safe or idempotent. POST N times, create N copies.
        this is why the browser says "are you sure you want to send thsi request again" when you refresh or click "back" through forms and such

other methods:
    PATCH (allowed to be non-idempotent. partial replacement of resource)
    HEAD (like GET, except, only send me the headers, not the body. client maybe wants to just see if resource exists, not necessarily get a representation of it. safe.)
    OPTIONS (tell me what things I can do with this resource (e.g. which HTTP methods are allowed) - responds with "Allow" header. safe, idempotent)
    TRACE (repeat back to me what you receive from me. for diagnostic purposes. idempotent)

most important: get should be safe, post (and others) we can do changes.

status codes
    100 informational - this request-response is still ongoing
        100 continue: you sent the headers, ok, now send the body
    200 successful
*       200 ok: successful request
            for get
            in asp.net core: Ok(...)
*       201 created: successful creation of resource. should generally return a copy of the resource created
            for post
            should also include Location header saying where it's at.
            CreatedAtRoute(...), CreatedAtAction(...)
        202 accepted: request received but hasn't been acted on yet.
*       204 no content: success but we are not returning anything
            for put and delete
            NoContent()
    300 redirection
        301 moved permanently: resource isn't here
            should also include Location header saying where it's at.
*       302 found: resource isn't here, browser usually automatically requests new URL with GET
            temporary redirect
            should also include Location header saying where it's at.
            RedirectToAction(...), RedirectToRoute(...)
        304 not modified: you had e.g. "if-modified-since" header, and the resource hasn't been modified
    400 client error
*       400 bad request. syntax of request is invalid.
            BadRequest()
*       401 unauthorized: really means unauthenticated. you did not identify yourself.
            Unauthorized()
        402 payment required: meme status code
*       403 forbidden: the true unauthorized. you don't have the rights to do this
            Forbidden()
*       404 not found
            NotFound()
        405 method not allowed: on this resource
            implemented by default in asp.net core
*       406 not acceptable: you used "accept" header and we can't give you that content type
            the server doesn't have to use 406, it can decide to use a fallback media type
        409 conflict: you can't do that because it's inconsistent with something else
*       415 unsupported media type
        418 i'm a teapot: you asked me to brew coffee
    500 server error
*       500 internalservererror
            StatusCode(500)
        501 not implemented - usually we will implement it in future. like notimplementedexception
*       502 bad gateway - this server didn't make a mistake, but we had to call some OTHER server, and IT sent us something invalid
        505 HTTP version not supported

ASP.NET Core has support for REST HTTP services.
works just like MVC, except we don't use views, we mostly use json media type instead of html.
rather than using convention-based routing, we use attribute routing,
    and we'll usually have a different action method for every supported HTTP method on a given resource.
    the URL will be based on the resource, and not involve the action method name.
    attributes: HttpGet, HttpPost, HttpPut, HttpDelete, etc.

the parent class of MVC's Controller is ControllerBase.
for APIs, we use ControllerBase, because the extra stuff Controller has is just for views.
we put [ApiController] attribute on the controllers, which changes some default behaviors:
- requires attribute routing
- automatic HTTP 400 errors from model binding.
    equivalent to having "if (!ModelState.IsValid) return BadRequest(ModelState);" as a global action filter.
- changes some model binding behavior to be more restrictive by default:
    - complex type parameters are implicitly [FromBody]
    - any parameter matching a route parameter name is implicitly [FromRoute]
    - almost everything else is implicitly [FromQuery]
    (can still override this of course. we also have [FromHeader] and [FromForm].)

return types
- IActionResult types
- any non-IActionResult type -> same as Ok(obj) if not null, NoContent if null.
- actionresult<T> with flexibility
    uses implicit casts to let you either return non-IActionResult types directly, or,
    any IActionResult type.

contentresult (text/plain) (or just return string)
jsonresult (application/json)
fileresult

content negotiation
    accept header (media type, request)
    in ASP.NET Core
        application/json, text/json, and text/plain are supported by default.
        configure this in Startup. e.g. AddXmlSerializerFormatters()
            can implement custom formatters or get more from nuget
        use Consumes resource filter to limit what media types that action will accept.
        use Produces result filter to limit what media types that action's result will use.

objectresult supports content negotiation based on accept header
many helper methods return types derived from objectresult.

[FormatFilter]
looks for {format} (can be optional with ?) in the Route
doesn't follow HTTP standard / REST uniform interface
