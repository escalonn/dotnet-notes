SOA
    service-oriented architecture
    very loosely coupled "projects" compared to what we did in project 1
    very portable, tech stack on either side doesn't matter
    language independent
    service can be any language, any platform, any network
    all that matters is the contract of the service
        two contract patterns, SOAP and REST
    SOAP
        (originally meant: simple object access protocol)
        a protocol useful for SOA
        messaging protocol with envelope containing header and body
            can send WSDL to give operation contract
        has rules about how to connect and what format to talk over
        rules are defined within WSDL, description protocol
            Web Services Description/Definition Language
        SOAP is very common for web services
        it is verbose, clear, more secure (can secure both message and "pipe"
            with a different transport protocol because SOAP is protocol-neutral)
        with WebInvoke/WebGet can put REST type behavior in SOAP
    REST
        Representational state transfer
        in practice, always HTTP
        HTTP Verbs
            GET
            POST
            PUT
            DELETE
        hypermedia = restful service
            for every call, send additional info about

SOAP vs REST
- rest = http, soap = any protocol. over http, just uses POST.
- soap = xml, rest = any format, but json is easier to parse and lightweight.
- rest = stateless, soap = could be stateful
- rest = good caching support, soap also supports it but
    not at the http level, have to do some more work
- soap = lots of security support. rest = just https, not truly end to end security.
- rest = simpler, easy to get up and running because http is everywhere, and oyu don't have to deal with xml.
- soap = contract based on WSDL document. rest = contract based on
    HTTP standards and conventions, and either hypermedia, or an API description language like openapi (aka swagger), or just human-readable documentation.
- soap errors = faults. rest errors = 4xx, 5xx status codes.


XML more commonly used between multiple servers.
JSON more commonly used between server and browser.

WCF windows communication foundation
    server-side actual implementation, .net framework only.
    client-side, it's in .net core too
    project types:
        application svc
        library svc (so some other application will have to give it context to run)
        syndication svc
    wcf services communicate through endpoints. every endpoint has:
        A - address: a URL to identify and locate the endpoint
        B - binding:
            e.g. BasicHttpBinding.
            what transport protocol e.g. HTTP over TCP, TCP, UDP, MSMQ
                in theory SOAP can use many protocols, but HTTP is common,
                where every message is sent as the body of a POST request.
            what encoding, what security requirements
        C - contract
            client-server request-reply pattern by default, but
                supports other scenarios too
            service contract - i will provide menu of operation contract
                operation contract
            data contract
                datamember attribute
            fault contract - i will send error messages
            transaction behavior
                ACID, atomic consistent isolated durable
