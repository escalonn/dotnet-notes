SOA
    service-oriented architecture
    very loosely coupled "projects" compared to what we did in project 1
    very portable, tech stack on either side doesn't matter
    language independent
    service can be any language, any platform, any network
    all that matters is the contract of the service
        two contract patterns, SOAP and REST
    SOAP
        (simple object access protocol)
        a protocol useful for SOA
        messaging protocol with envelope containing header and body
            can send WSDL to give operation contract
        has rules about how to connect and what format to talk over
            A - address
                e.g. URL, URI
            B - binding
                what transport protocol e.g. HTTP over TCP, UDP
                SOAP is NEUTRAL about transport protocols, while REST is tied to HTTP
            C - contract
                serialization/deserialization rules
                XML conventionally system <-> client
                JSON conventionally system <-> user
                    service contract - i will provide menu of operation contract
                    operation contract
                    data contract
                        data members
                    fault contract - i will send error messages
                    transaction behavior
                        ACID, atomic consistent isolated durable
        rules are defined within WSDL, description protocol
            Web Services Description Language
        SOAP is very common for web services
        it is verbose, clear, more secure (can secure both message and "pipe"
            with a different transport protocol because SOAP is protocol-neutral)
        every call comes with the WSDL definition
        with WebInvoke/WebGet can put REST type behavior in SOAP
    REST
        Representational state transfer
        a framework
        just address. make binding and contract inferrable from address
        always HTTP
        HTTP Verbs
            GET
            POST
            PUT
            DELETE
        hypermedia = restful service
            for every call, send additional info about
    SOAP vs REST:
        SOAP provides entire service contract, every endpoint, with every call, heavy.
        REST provides relevant "next steps" (hypermedia), nearby endpoints, with every call,
            and the rest of the contract is implied by HTTP methods.
Protocols

SOAP vs REST
- rest = http, soap = any protocol. over http, just uses POST.
- soap = xml, rest = any format, but json is easier to parse and lightweight.
- rest = stateless, soap = could be stateful
- rest = good caching support, soap also supports it but
    not at the http level, have to do some more work
- soap = lots of security support. rest = just https, not truly end to end security.
- rest = simpler, easy to get up and running because http is everywhere, and oyu don't have to deal with xml.
- soap = contract based on WSDL document. rest = contract based on
    HTTP standards and conventions, and either hypermedia, or an API description language like openapi (aka swagger), or just human-readable documentation.
- soap errors = faults. rest errors = 4xx, 5xx status codes.


WCF windows communication foundation
    server-side actual implementation, .net framework/classic only.
    client-side, it's in .net core, anyone should be able to handle it.
    types:
        application svc
        library svc (doesn't have web.config, so some other application will
            have to give it context to run)
        syndication svc

XML conventionally system <-> client
JSON conventionally system <-> user

what is a web service?
what is the basic structure of a soap message?
what is protocol binding in soap?
what are the five groups of http status codes?
what is the role of the accept header in http? what about content-type?
what are some advantages and disadvantages of service-oriented architecture?
what is the purpose of the WSDL file?
what are the most common http verbs, and what are they used for?
how does a rest service communicate error conditions to the client? what about a soap service?
what is the difference between operationcontract and servicecontract
