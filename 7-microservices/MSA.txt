---






---

MSA
overview
tech agnostic but some techs
monolith vs distributed
advantages and disadvantages
tools & mechanisms, orchestration, message queues

interactive
prompt for questions
audience - furloughed and staging

------


what is microservices architecture
    each microservice (or service) implements one business capability
    developed independently
    deployed independently
    scaled independently
    owns domain logic and data persistence
    values:
        products not projects - same devs keep responsibility for services in prod
        smart endpoints and dumb pipes
            unlike much of SOA, keep the connections between your services simple,
                no heavyweight ESB or gateways that have complicated logic managing
                the services.
            REST constraint of uniform interface
        CI/CD
advantages of MSA
    long-term flexibility
    scaling of actual function that needs more resources -> cost savings
    works well with Agile - evolve many parts of a large complex app with confidence
        it wont break other code (if you dont change the interfaces/contracts)
why data sovereignty
    the big centralized db is a performance bottleneck for real-world apps
    the design of the data model when there is only one db leads to huge tables
        with columns to serve many different, unrelated concerns
    "like using the same physical map for a short hike, for a road trip, and
    for learning geography"
    each microservice will not have a copy of the data model of all the others;
    it will only store the data it needs, in the format that
    best suits its domain logic.
disadvantages of data sovereignty (>1 data store)
    lose ability to leverage full power of SQL to easily combine data in queries from many
        different tables, from all the app's data. now that data is spread out
        in several different services.
    lose straightforward ACID approach to transactions. with one db we can enforce
        atomicity and isolation using locks on rows and columns.
        but we cannot lock one microservice until another one has finished
            the overall transaction. that's not realistic and it couples the services
            too much.
        so... we abandon nice and neat transactions, and adopt "eventual consistency,"
            which is hard to get right.
(microservices architecture need special attention paid to...)
how to carve up the user stories into microservices
    a user might be, in different contexts, a user, a customer, a buyer, a contact...
    that doesn't all have to be one table!
    the different terminology we use is a clue that these different contexts
    think about the data differently and we can carve each logical context into a
        microservice.
how to query info that is spread out across microservices?
    hard problem in general!
    solved by more microservices!
        usually addressed with API gateways, whose job is to bring back
        together data e.g. so it can all be displayed on one page for the user.
        API gateways can be a trap - especially if we have one for the whole app,
        it can become a bottleneck and it can wind up coupling the microservices
        together as well as becoming single point of failure.
how to manage "transactions" (eventual consistency) across microservices?
    hard problem!
    we need to send data between microservices so it is consistent, but we don't
    want to couple them together! as much as possible, microservices should not
    know about each other so they can be autonomous.
    usually addressed with some asynchronous event- or message-based protocol
    instead of HTTP.
    one microservice publishes some event, and others listen to that event.
    but they do not directly send requests to each other.
others
    service failure resiliency
    monitoring of service health in production
    scalability of services and their resources
    security in auth and service communication
    container orchestrators like kubernetes can help us with these four items.
MSA pioneers
    Netflix
        lots of open source tooling for microservices
        simian army - test resiliency to failure by randomly crashing parts of the app
        high value on asynchronous communication between services instead of synchronous
    Amazon
        emphasis on devs owning product through production, devs = ops
resources
    https://martinfowler.com/microservices/
    https://docs.microsoft.com/en-us/dotnet/architecture/microservices/
